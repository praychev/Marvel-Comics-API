//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Website.CharacterReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CharacterReference.ICharacter")]
    public interface ICharacter {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/GetCharacters", ReplyAction="http://tempuri.org/ICharacter/GetCharactersResponse")]
        ApplicationService.DTOs.CharacterDTO[] GetCharacters();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/GetCharacters", ReplyAction="http://tempuri.org/ICharacter/GetCharactersResponse")]
        System.Threading.Tasks.Task<ApplicationService.DTOs.CharacterDTO[]> GetCharactersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/PostCharacter", ReplyAction="http://tempuri.org/ICharacter/PostCharacterResponse")]
        string PostCharacter(ApplicationService.DTOs.CharacterDTO characterDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/PostCharacter", ReplyAction="http://tempuri.org/ICharacter/PostCharacterResponse")]
        System.Threading.Tasks.Task<string> PostCharacterAsync(ApplicationService.DTOs.CharacterDTO characterDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/PutCharacter", ReplyAction="http://tempuri.org/ICharacter/PutCharacterResponse")]
        string PutCharacter(ApplicationService.DTOs.CharacterDTO characterDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/PutCharacter", ReplyAction="http://tempuri.org/ICharacter/PutCharacterResponse")]
        System.Threading.Tasks.Task<string> PutCharacterAsync(ApplicationService.DTOs.CharacterDTO characterDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/DeleteCharacter", ReplyAction="http://tempuri.org/ICharacter/DeleteCharacterResponse")]
        string DeleteCharacter(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/DeleteCharacter", ReplyAction="http://tempuri.org/ICharacter/DeleteCharacterResponse")]
        System.Threading.Tasks.Task<string> DeleteCharacterAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/Message", ReplyAction="http://tempuri.org/ICharacter/MessageResponse")]
        string Message();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICharacter/Message", ReplyAction="http://tempuri.org/ICharacter/MessageResponse")]
        System.Threading.Tasks.Task<string> MessageAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICharacterChannel : Website.CharacterReference.ICharacter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CharacterClient : System.ServiceModel.ClientBase<Website.CharacterReference.ICharacter>, Website.CharacterReference.ICharacter {
        
        public CharacterClient() {
        }
        
        public CharacterClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CharacterClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CharacterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CharacterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ApplicationService.DTOs.CharacterDTO[] GetCharacters() {
            return base.Channel.GetCharacters();
        }
        
        public System.Threading.Tasks.Task<ApplicationService.DTOs.CharacterDTO[]> GetCharactersAsync() {
            return base.Channel.GetCharactersAsync();
        }
        
        public string PostCharacter(ApplicationService.DTOs.CharacterDTO characterDto) {
            return base.Channel.PostCharacter(characterDto);
        }
        
        public System.Threading.Tasks.Task<string> PostCharacterAsync(ApplicationService.DTOs.CharacterDTO characterDto) {
            return base.Channel.PostCharacterAsync(characterDto);
        }
        
        public string PutCharacter(ApplicationService.DTOs.CharacterDTO characterDto) {
            return base.Channel.PutCharacter(characterDto);
        }
        
        public System.Threading.Tasks.Task<string> PutCharacterAsync(ApplicationService.DTOs.CharacterDTO characterDto) {
            return base.Channel.PutCharacterAsync(characterDto);
        }
        
        public string DeleteCharacter(int id) {
            return base.Channel.DeleteCharacter(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteCharacterAsync(int id) {
            return base.Channel.DeleteCharacterAsync(id);
        }
        
        public string Message() {
            return base.Channel.Message();
        }
        
        public System.Threading.Tasks.Task<string> MessageAsync() {
            return base.Channel.MessageAsync();
        }
    }
}
